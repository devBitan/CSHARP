C#: lenguaje de programación orientado a objetos, multiplatafotma, es de código administrado, es decir, que requiere un lenguaje intermediario para paraducirlo a código máquina
.NET: framework de c#

namespace: permite agrupar clases e interfaces con le fin de organizarlas, facilita la modularidad del código

Crear un proyecto de consola de c# -dotnet new console -n nombreDelProyecto
    correr el proyecto -dotnet run

Clase en C#: 
    -es una plantilla para crear objetos
método main en c#: Permite ejecutar nuestro programa

namespaces: Windows.Form, tiene el componente button y muchos mas 

Espacio de memoria, se puede almacenar valor
    Variables: El valor puede ser modificado en cualquier parte del programa 
    Constante: alacenan un valor fijo que no puede ser moficado
TIPOS DE DATOS: hay primitivos y no primitivos, indican que tipo de valor va a estar almacenado en una variable o en una constante
    Enteros: datos numericos de tipo enteros: 
        int: 4 Bytes de memoria
        long: 8 Bytes de memoria
        Short: 2 Bytes de memoria
        Byte: 1 Byte de memoria
    Decimales
        Float: 4 Bytes de memoria
        Double: 8 Bytes de memoria
    Booleanos
        True
        False
    Caracteres
        Char: almacenar un caracter individual
    Cadena de Caracteres
        String

Declaración y asignación de datos
Al crear una variable se tiene que asociar a un tipo de dato, al iniciar una variable es darle valor a la misma, ese dato debe estar relacionado al tipo de datos con el que se creó la variable
    *1*
    Constantes: const (tipo de de dato) NOMBRE_DE_LA_CONSTANTE = valor
    Variables: (tipo de dato) nombreDeLaVariable = valor / int number =1;
Modifiar un valor
    nombreDeLaVariable = nuevo valor

Ámbito de una variable: indican el espacio de la variable y que alcance tiene cuando es declarada
    -Local: se declaran dentro de una función, método, condiciones, bluces, etc
        - solo pueden ser accedidas o modificadas desde la misma función donde fueron declaradas *2*
    -Global: una vez declaradas pueden ser utilizadas desde cualquier parte del programa

Operadores y expresiones
    Operadores: aritmeticos, relacionales, lógicos, ayudan a establecer operaciones matematicas, comparaciones, condiciones
        Operadores aritméticos
            + suma
            - resta
            * multiplicación
            / división
            % modulo o residuo
            ++ Incremento
            -- Decremento
        Operadores relacionales (comparaciones y condiciones) el resultado es true o false
            > Mayor que
            < Menor que
            >= Mayor o igual que
            <= Menor o igual que
            != Distinto que
            == Igual que
        Operadores lógicos (unir dos o mas condicioness) el resultado es true o false
            && y c1 -c2 ambas condiciones deben ser verdaderas - true
            || o c1 -c2 almenos una de las condiciones debe ser verdadera - true
            ! Negación - transforma la condicion de false a true y de true a false

    Expresión: Es la representación de un valor *3*
        expresiones aritmeticas
        expresiones relacionales se tiene que declar en variables booleandas
        expresiones lógicas
    
Entrada de datos por teclado
    Usando el método ReadLine de la clase Console (Console.ReadLine)
    video numero 6, min 2:30

Funciones

[modificadores] tipo_retorno nombre_funcion (argumentos) {
    codigo
}

Una clase permite guardar variables y funciones
    variables = propieadrs
    funciones = metodos

    Ppio de escapsulamiento (controlar el acceso a cada porpiedad y metodo de la clase)
        -publico = desde cualuwir lugar se púede acceder 
        protegido
        privado = solo se accede dentro de la clase 

UML

clases

Objetos
    Constructor: lo primero que se ejecuta cuando creo un objeto


metodos
    miembro de una clase
    puede acceder y modidicar atributos de una clase
    puede aceptar argumentos
    puede devolver un valor
    puede ser sobrrescrito o sobrecargadfo
    puede ser estatico o bastracto 

    Declarar un metodo
    nivel de acceso - que dato retorna - nombre metodo(){}
                public string mostrarInfo()
                {
                    
                }
    Soi el nivel de acceso es privado lo que se tiene que hacer es usar dentro de un metodo publico para acceder a el 
        public string algoPublico()
        {
            return algoPrivado
        }
        private striong algoPrivado()
        {
            return hola 
        }

porpiedades y encapsulamiento
    miembros de una clase
    visibilidad - fuera de la clase se puede acceder a esta propiedad
    getter y setters
    inmutabilidad - una propiedad solo se defina una vez y no pueda ser modificado
    abstraccion 

Herencia
    -es como englobar 
    animal
        perro hereda de animal
        un gato hereda de animal
        hamster hereda de animal
    una clase padre define lo que se hereda

    public class Gerente: Persona (persona es el padre de donde va a heredar)
    las propieades con el nivel de acceso protected solo son para los hijos que heredan

Clases Abstractas : 
    No se pueden crear instancias
    pueden tener metodos abstractos
    pueden tener metodos concretos
    pueden tener variables de instancia
    las clases bastractas pueden heredar de otras clases bastractas o concretas

Metodos abstractos
    declaracion sin implementacion
    obligatoriedad de implementacion
    el comportamiento lo define la clase hija

Clase Persona
    Clase Empleado
        Clase vendedor
        Clase Gerente


interfaces (se parecen a las clasea bstractas)
    Separar comportamiento
    Permite una mejor abstracción
    Es un contrato que define las clausuas que se deben cumplir, es decir, los metodos que se deben cumplir